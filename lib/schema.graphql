type User {
    _id: ID 
    nombre: String
    apellido: String
    email: String
    contrasena: String
    documentType: String
    documentId: String
    rol: String
    Estado: String
    inscripciones: [Inscriptions]
    }

type Project {
    _id: ID
    codigoProyecto: String
    nombre: String
    objGenerales: String
    objEspecificos: String
    presupuesto: Int
    fInicio: Int
    fFinal: Int
    estadoProyecto: String
    fase: String
    advanceProject: [Advance]
    }

type Advance {
    _id: ID
    fecha: Int
    descripcion: String
    LeadObserv: String
}

type Inscriptions {
    _id : ID
    codigoProyecto: String
    inscripcionStatus: String
    fechaIngreso: Int
    fechaEgreso: Int
}

input UserInput {
    nombre: String!
    apellido: String!
    email: String!
    contrasena: String!
    documentType: String!
    documentId: String!
    rol: String!
    estado: String
}

input UserStateInput{
    estado: String
}

input UserEditInput {
    nombre: String
    apellido: String
    email: String
    contrasena: String
    documentId: String
}

input ProjectInput {
    codigoProyecto: String!
    nombre: String!
    objGenerales: String!
    objEspecificos: String!
    presupuesto: Int!
    fInicio: Int!
    fFinal: Int!
    estadoProyecto: String
    fase: String
    }

input AdvanceInput {
    advanceCode: String!
    codigoProyecto: ID!
    fecha: Int!
    descripcion: String!
    LeadObserv: String
}

type Course {
    _id: ID 
    title: String
    teacher: String
    description: String
    topic: String
}

type Query {
    "Devuelve todos los cursos"
    getUsers: [User]
    "Devuelve un curso"
    getUser (id:ID!): User
}


type Mutation {
    
    "Registra un usuario"
    registerUser (input: UserInput): User
    
    "Autoriza o No Autoriza a un usuario"
    editUserState (_id: ID!, input:UserStateInput): User
    
    "Edita la informacion personal de un usuario"
    editUserInfo (_id: ID!, input:UserEditInput): User

    "Registra un proyecto"
    registerProject (input: ProjectInput): Project

    "Adicionar los objetivos"
    addObjetivos(courseID: ID!, personID: ID!): Course

    "Registra un avance"
    addAdvance (input: AdvanceInput): Advance

    "Adicionar un avance al proyecto"
    addAdvancetoProject(projectID: ID!, advanceID: ID!): Project
}
